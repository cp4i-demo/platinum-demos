{"componentChunkName":"component---src-pages-300-integration-demo-script-mdx","path":"/300-integration/demo-script/","result":{"pageContext":{"frontmatter":{"title":"Demoscript","description":"Demo script","tabs":["Demo preparation","Demo script"]},"relativePagePath":"/300-integration/demo-script.mdx","titleType":"page","MdxNode":{"id":"54a36103-191e-5a45-ae80-4daed8831f81","children":[],"parent":"466ae6fa-e57e-5164-bd46-9c4e6d4aec53","internal":{"content":"---\ntitle: Demoscript\ndescription: Demo script\ntabs: [ 'Demo preparation', 'Demo script']\n---\n\nexport const Title = () => <span>Improving customer service using APIs and integration: 300-level live demo</span>\n\n<FeatureCard\n  title=\"Demo Script\"\n  color=\"dark\"\n  >\n\n![banner](./images/demo-script.jpg)\n</FeatureCard>\n\n<span id=\"place1\"></span>\n\n<AnchorLinks>\n  <AnchorLink>Introduction</AnchorLink>\n  <AnchorLink>1 - Accessing the environment</AnchorLink>\n  <AnchorLink>2 - Importing the flow</AnchorLink>\n  <AnchorLink>3 - Reviewing the flow</AnchorLink>\n  <AnchorLink>4 - Testing the flow</AnchorLink>\n  <AnchorLink>5 - Deploying the flow</AnchorLink>\n  <AnchorLink>6 - Managing APIs</AnchorLink>\n  <AnchorLink>7 - Portal</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n## Introduction\n\n<br/>\n\n| **Introduction ** |   |\n| :---         | :--- |\n| **Actions**             | Show demo introduction [slides](./slides.pptx). |\n| **Narration**      | Automating customer interactions can remove manual steps, data entry into multiple different applications, and potential errors and delays – all of which are additional costs to your business. This demo automates a series of steps to: obtain and validate input information from a customer, open a case in Salesforce, attach incoming information to the case, analyze customer tone, and respond to the customer with the case number and expected date for resolution.<br/><br/>To automate this customer interaction, we will use both APIs and integrations. This demo scenario is related to a car repair, but this is just an example. The same techniques are applicable to any industry.<br/><br/>Let’s get started!\n| **[Go to Top](#place1)** |   |\n\n## 1 - Accessing the Environment\n\n<details>\n<summary>1.1 - Log into Cloud Pak for Integration</summary>\n\n<br/>\n\n| **Log into Cloud Pak for Integration** |   |\n| :---         | :--- |\n| **Actions**             | Open Cloud Pak for Integration and click **IBM provided credentials (admin only)** and **Log in** with your admin user and password. |\n| **Narration**      | Let’s see IBM Cloud Pak for Integration in action. Here I have a cloud version of the product on IBM Cloud. We will log in here. |\n| **Screenshots**         | &nbsp;  <br/>![login1](./images/demoscript-login1.png) <br/>![login2](./images/demoscript-login2.png) |\n\n</details>\n\n<details>\n<summary>1.2 - Cloud Pak for Integration home screen</summary>\n\n<br/>\n\n| **Cloud Pak for Integration home screen** |   |\n| :---         | :--- |\n| **Actions**             | Show the home screen and click on **Integration Capabilities**. |\n| **Narration**      | Welcome to IBM Cloud Pak for Integration! We’re now at the home screen showing all the capabilities of the pak, brought together in one place. Specialized integration capabilities for API management, application integration, messaging and more, are built on top of powerful automation services. Let’s see the integration capabilities available.|\n| **Screenshots**         | &nbsp;  <br/> ![home](./images/demoscript-home.png) |\n\n</details>\n\n<details>\n<summary>1.3 - Integration capabilities</summary>\n\n<br/>\n\n| **Integration capabilities** |   |\n| :---         | :--- |\n| **Actions**             | Show the integration capabilities page and open the Designer (**ace-designer-demo**). |\n| **Narration**      | As you can see, through a single interface you are able to access all the integration capabilities your team needs. Including API Management, Application Integration, Enterprise Messaging, Events, and High-Speed Transfer. In this demo to automate customer interactions with our company we will use App Connect for application integration, API Connect for API management, and the Asset Repository as our centralized hub for allowing our teams to work together with integration assets. Let’s open our App Connect Designer. |\n| **Screenshots**         | &nbsp; <br/> ![integration capabilities](./images/demoscript-integration.png) |\n| **[Go to Top](#place1)** |   |\n\n</details>\n\n## 2 - Importing the flow\n\n<details>\n<summary>2.1 - Create from an asset</summary>\n\n<br/>\n\n| **Create from an asset** |   |\n| :---         | :--- |\n| **Actions**             | Click **Create from an Asset**. |\n| **Narration**      |  We are in the designer tooling. This is where we can create all our API integration flows and manage our connectivity to services and endpoints. Since we are just starting, there is nothing to see yet. Let’s build some integration logic and see how simple to create our flow from the Asset Repository. |\n| **Screenshots**         | &nbsp;  <br/> ![import1](./images/demoscript-createfromasset.png) |\n\n</details>\n\n<details>\n<summary>2.2 - Select an asset</summary>\n\n<br/>\n\n| **Select an asset** |   |\n| :---         | :--- |\n| **Actions**             | Click on the **+** sign to the right on the **Car Insurance Cognitive API Lab Short V2**. |\n| **Narration**      | We have a flow stored in the Asset Repository. Let’s use it to simplify our demonstration.|\n| **Screenshots**         | &nbsp;  <br/> ![import2](./images/demoscript-select-asset.png) |\n| **[Go to Top](#place1)** |   |\n\n</details>\n\n## 3 - Reviewing the flow\n\n<details>\n<summary>3.1 - Review properties</summary>\n\n<br/>\n\n| **Review properties** |   |\n| :---         | :--- |\n| **Actions**             | Show the **Properties view** and click on **Operations** |\n| **Narration**      | The designer builds your API for you – you don’t need to worry about OpenAPI specs or Swagger editors – it’s all built in. These are the fields we are going to use for our API. Note that we tell our API which field is the key – in our case, CaseReference.|\n| **Screenshots**         | &nbsp;  <br/> ![review1](./images/demoscript-review-props.png) |\n\n</details>\n\n<details>\n<summary>3.2 - Review operations</summary>\n\n<br/>\n\n| **Review operations** |   |\n| :---         | :--- |\n| **Actions**             | Show the **Operations view** and click on **Edit flow** |\n| **Narration**      | In the Operations view are the actions that the API exposes along with the data. In this demo, we’re going to build just one operation – “Create Car Repair Claim”.  We can add more later if we wish. Let’s check the flow logic. |\n| **Screenshots**         | &nbsp;  <br/> ![review2](./images/demoscript-operations.png) |\n\n</details>\n\n<details>\n<summary>3.3 - Review the flow</summary>\n\n<br/>\n\n| **Review the flow** |   |\n| :---         | :--- |\n| **Actions**             | Initially **close** the Request dialog. Explain the Flow and Scroll through all of the connectors in the flow. After that, open the **Request** again, by clicking the first step of the flow. |\n| **Narration**      | Here we have our demo flow. In the designer flow editor, we can edit and change our flow. We are a car repair company that wants to create an API that will enable customers to send us photos of their cars along with descriptions of what needs to be done with them. With this information, we will create a case in Salesforce while using Watson to analyze if the customer is angry or upset. Let’s explore our flow in detail. |\n| **Screenshots**         | &nbsp;  <br/> ![review2](./images/demoscript-review-flow.png) |\n\n</details>\n\n<details>\n<summary>3.4 - Review request</summary>\n\n<br/>\n\n| **Review request** |   |\n| :---         | :--- |\n| **Actions**             | Show the *Request* dialog (1). Click to *open* the **if** step (2). |\n| **Narrations**      | Our flow starts by receiving the customer’s car repair request with photo via an API. Designer automatically creates an API “request” and “response” for your API flow.|\n| **Screenshots**         | &nbsp;  <br/> ![review3](./images/demoscript-review-request.png) |\n\n</details>\n\n<details>\n<summary>3.5 - Validating the photo</summary>\n\n<br/>\n\n| **Validating the photo** |   |\n| :---         | :--- |\n| **Actions**             | Explore the *if* step (1) and click on **Salesforce Connector - Retrieve contacts** (2). |\n| **Narration**      | Second, we validate the photo. We have a simple \"if\" statement that checks if the PhotoOfCar is empty. |\n| **Screenshots**         | &nbsp;  <br/> ![review5](./images/demoscript-review-if.png) |\n\n</details>\n\n<details>\n<summary>3.6 - Retrieve contacts</summary>\n\n<br/>\n\n| **Retrieve contacts** |   |\n| :---         | :--- |\n| **Actions**             | Explore the *Salesforce Connector - Retrieve contacts* (1). Change the *Contact name* to **Andrew Young** (2). And **test** the connection (3). Change back the *Contact Full name* to **Andy Young** (4) and **test** again (5). Open **View details** (6). On the *Output*, open the **Contact1** object (7). **Close** all the dialog tabs. Click on the **Salesforce – Create case node** (8). |\n| **Narration**      | Third, we use a connector to create a case in Salesforce with the data from the API. This case is where we store the details and progress of our repair. We are using a hard-coded contact name: ‘Andy Young’. He’s the contact for the insurance company that sends customers. Salesforce Developer Accounts have a prepopulated set of data that you can use to test. ‘Andy Young’ is one of those prepopulated contacts. Let’s test our connection with Salesforce. Let me change the contact to Andrew Young and test the connection.<br/><br/> The test shows that we don’t have an Andrew Young. Let’s change it back to Andy Young and test again. We now receive a successful response. This proves that our connection is working. Let’s check the details. Here we can see the output returned from Salesforce, including the Contact ID. |\n| **Screenshots**         | &nbsp;  <br/> ![contacts1](./images/demoscript-contacts1.png) <br/> ![contacts2](./images/demoscript-contacts2.png) <br/> ![contacts3](./images/demoscript-contacts3.png) <br/> ![contacts4](./images/demoscript-contacts4.png) <br/> ![contacts5](./images/demoscript-contacts5.png)|\n\n</details>\n\n<details>\n<summary>3.7 - Create a case</summary>\n\n<br/>\n\n| **Create a case** |   |\n| :---         | :--- |\n| **Actions**             | Explore the *Salesforce – Create case node*. **Close** the Salesforce connector dialog. Open the **Salesforce - Create Attachment** node. |\n| **Narration**      | Now that we have the ID that we need, let’s create our Salesforce case. Note that we just re-use the same Salesforce connector but with a different operation and data. Here we can see that our contact ID comes from the previous ‘retrieve contact’ Salesforce Call. The name and email address come from the API request. The connector ‘knows’ that fields like ‘Case Type’ have a limited number of values in Salesforce – so it automatically converts them into pull-down lists of values you can choose. |\n| **Screenshots**         | &nbsp;  <br/> ![review7](./images/demoscript-review-Salesforce-createcase.png) |\n\n</details>\n\n<details>\n<summary>3.8 - Create an attachment</summary>\n\n<br/>\n\n| **Create an attachment** |   |\n| :---         | :--- |\n| **Actions**             | Explore the *Salesforce – Create attachment node* (1). **Close** the Salesforce connector dialog. Open the **IBM Watson Tone Analyzer** node (2). |\n| **Narration**      | To add a photograph, we need to create a Salesforce attachment. That will be easy, since we just use the connector again. Note that we use the case ID that is a returned value from the ‘Create Case’ connector call, which is kept in the flow automatically. We send the PhotoOfCar as a base64 string and we tell Salesforce that the content type is image/jpeg. |\n| **Screenshots**         | &nbsp;  <br/> ![review8](./images/demoscript-review-attachment.png) |\n\n</details>\n\n<details>\n<summary>3.9 - Analyze the description</summary>\n\n<br/>\n\n| **Analyze the description** |   |\n| :---         | :--- |\n| **Actions**             | Explore the *Watson Tone Analyzer* connector (1). **Close** the Tone Analyzer connector dialog. Open the **Salesforce - Create case comment** (2). |\n| **Narration**      | Here, the Watson Tone Analyzer service analyzes the tone of the information provided by the customer. This can identify if the customer is angry or upset, allowing us to better tailor our response. |\n| **Screenshots**         | &nbsp;  <br/> ![review9](./images/demoscript-review-analyzer.png) |\n\n</details>\n\n<details>\n<summary>3.10 - Create case comment</summary>\n\n<br/>\n\n| **Create case comment** |   |\n| :---         | :--- |\n| **Actions**             | Explore the **Salesforce – Create case comment** node (1). Close the Salesforce connector dialog. Open the **Response**. (2) |\n| **Narration**      | Now we’ll add a comment to the case with the Salesforce connector and supply the tone name returned from Watson into the body of the comment. |\n| **Screenshots**         | &nbsp;  <br/> ![review10](./images/demoscript-review-comment.png) |\n\n</details>\n\n<details>\n<summary>3.11 - Responding to the customer</summary>\n\n<br/>\n\n| **Responding to the customer** |   |\n| :---         | :--- |\n| **Actions**             | Explore the *Response* dialog (1). Click **Done** (2). |\n| **Narration**      | Here we have the response that we submit to the customer after the API call. This response includes their Salesforce case reference for future enquiries, an estimate of how long it will take to repair, and also how much it will cost. Now that we've built the flow, let’s start it! |\n| **Screenshots**         | &nbsp;  <br/> ![review11](./images/demoscript-review-response.png) |\n| **[Go to Top](#place1)** |   |\n\n</details>\n\n## 4 - Testing the Flow\n\n<details>\n<summary>4.1 - Starting the flow</summary>\n\n<br/>\n\n| **Starting the flow** |   |\n| :---         | :--- |\n| **Actions**             | Click **Start API** on the *three dot menu* at the top right |\n| **Narration**      | Now that we’ve looked at the integration flow, let’s start it up. When our flow is running, we need to test it.  |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-start-flow.png) |\n\n</details>\n\n<details>\n<summary>4.2 - Setting environment variables</summary>\n\n<br/>\n\n| **Setting environment variables** |   |\n| :---         | :--- |\n| **Actions**             | Open the **Test** tab (1). Copy the **Endpoint URL** (2). Open **POST /CarRepairClaim** (3). Open **Try it** (4).  Copy the **Username** (5) and **Password** (6). In your script folder, on *terminal* window, *edit* the **00-variables** file (e.g.: *vi 00-variables*) and update the **BASEPATH** (7), **USERNAME** (8) and **PASSWORD** (9). Execute **source exportVariables.sh** (10) |\n| **Narration**      | Now that we’ve built our API, we need to test it. APIs can be tested in various ways, and we will performe three different tests: one in the designer tool now; another when our API is deployed to the Cloud Pak App Connect Runtime; and a final test that will call through a gateway. Since we’re using base64 pictures, for simplicity and speed we will use simple curl scripts so that we can call the APIs from the command line.<br/><br/> Before we execute the script to call our API, we need to configure our script to point to our environment. To get the credentials for the designer, we go to the ‘Manage’ tab in designer. Now, let’s change our variable files to use these credentials.  Let’s export these variables. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-variables0.png) <br/> ![](./images/demoscript-variables1.png) <br/> ![](./images/demoscript-variables2.png)  <br/> ![](./images/demoscript-variables3.png) |\n\n</details>\n\n<details>\n<summary>4.3 - Running the test</summary>\n\n<br/>\n\n| **Running the test** |   |\n| :---         | :--- |\n| **Actions**             | Edit the **demotestcar.sh** script (1). Explore and close the file. Execute **./demotestcar.sh** (2). |\n| **Narration**      | It's time to run the script. Checking the script, we can see that we have a simple curl command that calls our API, passing the user and password. Our data request is JSON with all the information about the case, including a picture with a Subaru SUV. When it is ready, we run this script. We received the expected response with the case information. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-car-running1.png) <br/> ![](./images/demoscript-car-running2.png) |\n\n</details>\n\n<details>\n<summary>4.4 - Checking Salesforce</summary>\n\n<br/>\n\n| **Checking Salesforce** |   |\n| :---         | :--- |\n| **Actions**             | Open the **Salesforce Dev Account** site (1). On the *App Launcher* menu, search for **Cases** (2). Open the **Cases** page (3). On *Cases* view, open the latest **Car Breakdown case** (4). Explore all fields, including picture and Watson analysis (5).  |\n| **Narration**      | Let’s check our Salesforce system to see if we have a new case. Let’s open the Cases page. In the Recently Viewed section, we can check all open cases. Here we have our case with all the information, including the picture and the Watson tone analysis. With this information, our customer relationship team can support our customer.  |\n| **Screenshots**         | &nbsp;  <br/> ![Salesforce-check1](./images/demoscript-Salesforce-check1.png) <br/> ![](./images/demoscript-Salesforce-check2.png) <br/> ![](./images/demoscript-Salesforce-check3.png) |\n| **[Go to Top](#place1)** |   |\n\n</details>\n\n## 5 - Deploying the flow\n\n<details>\n\n<br/>\n\n| **5.1 - Export the BAR file** |   |\n| :---         | :--- |\n| **Actions**             | Into the *Designer Dashboard* (1), click the **menu** (2) and click **Export** (3).   Select **Runtime flow asset (BAR)** (4) and click **Export** (5).  |\n| **Narration**      | To deploy the flow to an integration server, you must export it as a BAR file. All the configuration settings, other than the connection credentials for your accounts, are preserved in the exported archive. Let’s export an executable BAR file. From the dashboard, locate the flow, open its menu, and then click Export. When you export a flow, you can choose to export its configuration as a YAML or BAR file, or as an OpenAPI document. In our case, we export as a BAR File. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-export-bar1.png) <br/> ![](./images/demoscript-export-bar2.png) |\n\n</details>\n\n<details>\n<summary>5.2 - Import the BAR file</summary>\n\n<br/>\n\n| **Import the BAR file** |   |\n| :---         | :--- |\n| **Actions**             | Open the **Main Menu** (1), and click **Run > Integrations** (2).  Click **Create a server** (3). Select **Quick start designer integration** (4) and click **Next** (5). **Upload the BAR** file (6) and click **Next** (7). Select **ace-designerdemo-designer-acc** (8) and click **Next** (9). Enter a *name* for our integration server (10). Set **Enable Operations Dashboard tracing** to **On** (11). Enter **cp4i** as *Operations Dashboard namespace (12). Click **Create** (13)   |\n| **Narration**      | Now, let’s open the App Connect Dashboard and create a new server. We need to create an integration server to run our integration. An integration server is a Kubernetes pod which has the containers needed to run our BAR file. We need to select the kind of tooling we used to build the integration. We used the Designer. So, we just need to upload the BAR file that we exported from designer. And here we choose which configurations we want. Here we enter the information that we want for our Integration server. Let’s create it! |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-import-bar1.png) <br/> ![](./images/demoscript-import-bar2.png) <br/> ![](./images/demoscript-import-bar3.png) <br/> ![](./images/demoscript-import-bar4.png) <br/> ![](./images/demoscript-import-bar5.png) <br/> ![](./images/demoscript-import-bar6.png)|\n\n</details>\n\n<details>\n<summary>5.3 - Verify the server</summary>\n\n<br/>\n\n| **Verify the server** |   |\n| :---         | :--- |\n| **Actions**             | Click on our **Integration Server** (1). Open our **API Flow** (2). Explore the API detais (3). |\n| **Narration**      | Now we have our new integration server. We need to wait some time for the pods to start. At this point, the integration is running on the Cloud Pak. Opening the server, we can see our API flow. And click again, we’ll drill down further and see our API details. We can see the REST operation, the base URL, and we can even download the OpenAPI document. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-verify-server1.png) <br/> ![](./images/demoscript-verify-server2.png) <br/> ![](./images/demoscript-verify-server3.png) |\n\n</details>\n\n<details>\n<summary>5.4 - Testing the flow on the runtime</summary>\n\n<br/>\n\n| **Testing the flow in the runtime** |   |\n| :---         | :--- |\n| **Actions**             | Copy the **Endpoint** (1). In your script folder, on *terminal* window, *edit* the **00-variables** file and update the **BASEPATH** (2). *NOTE:remove the \"/\" from the end of the endpoint*. Execute **source exportVariables.sh** (3). Execute **./demotestcar.sh** (4). Check the **new case** in *Salesforce* (5).|\n| **Narration**      | We’ll use the same scripts we used to test designer – we’ll just change the variables to point to the CP4I runtime. In the server, we can get the runtime information. Let’s update our variables file and export them again. Now, we just need to run our script again with the same request data. We can check the Salesforce cases page, and voilá here we have our new case created by calling the API in the Integration Runtime. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-testing-runtime1.png) <br/> ![](./images/demoscript-testing-runtime2.png) <br/> ![](./images/demoscript-testing-runtime3.png) <br/> ![](./images/demoscript-testing-runtime4.png) <br/> ![](./images/demoscript-testing-runtime5.png) |\n| **[Go to Top](#place1)** |   |\n\n</details>\n\n## 6 - Managing APIs\n\n<details>\n<summary>6.1 - Download an OpenAPI document</summary>\n\n<br/>\n\n| **Download an OpenAPI Document** |   |\n| :---         | :--- |\n| **Actions**             | Click **Download OpenAPI Document** link (1). Open your YAML file with any editor and manually add **x-ibm-configuration: gateway: datapower-api-gateway** (2).|\n| **Narration**      | We’ve created an application integration flow and successfully called it via a REST API call! Now, to make it accessible to the world, it’s important to add security around it. Let’s export our API to API Connect by downloading the OpenAPI document. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-download-openapi.png) <br/> ![](./images/demoscript-download-openapi2.png) |\n\n</details>\n\n<details>\n<summary>6.2 - Develop the API</summary>\n\n<br/>\n\n| **Develop the API** |   |\n| :---         | :--- |\n| **Actions**             | Open the **Menu** (1) and on **Run** (2) section, select **APIs** (3). If necessary, select the **ademo** instance (4). In the *API Connect* page, click **Common Services user registry** (5). Click **Develop APIs and Products** (6). Click **Add**, then choose **API (from REST, GraphQL or SOAP)** from the drop-down menu (7). Choose **From an existing OpenAPI service** (8) and click **Next** (9). Upload our **Car_Insurance..** YAML file (10) and click **Next** (11). Confirm the Info about API and click **Next** (12). Keep the security settings and click **Next** (13). |\n| **Narration**      | Now, let’s open our API Manager. Here, we add our API from an existing OpenAPI service by selecting our YAML file. We confirm the info about the API, keep the security settings. Our API with Client ID is created! |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-develop-api1.png) <br/> ![](./images/demoscript-develop-api2.png) <br/> ![](./images/demoscript-develop-api3.png) <br/> ![](./images/demoscript-develop-api4.png) <br/> ![](./images/demoscript-develop-api5.png) <br/> ![](./images/demoscript-develop-api6.png) <br/> ![](./images/demoscript-develop-api7.png) <br/> ![](./images/demoscript-develop-api8.png) <br/> ![](./images/demoscript-develop-api9.png) <br/> ![](./images/demoscript-develop-api10.png)|\n\n</details>\n\n<details>\n<summary>6.3 - Edit the API</summary>\n\n<br/>\n\n| **Edit the API** |   |\n| :---         | :--- |\n| **Actions**             | Click **Edit API** (1). Change to **Online** (2). scroll down to *Base Path*. You’ll see the base path has a trailing slash at the\nend. **Remove** this (3). Click **Save** (4). Click **Test** (5). |\n| **Narration**      | Let’s check our new API in API Manager. We will put our API online and test it. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-edit-api1.png) <br/> ![](./images/demoscript-edit-api2.png) <br/> ![](./images/demoscript-edit-api3.png)|\n\n</details>\n\n<details>\n<summary>6.4 - Test the API</summary>\n\n<br/>\n\n| **Test the API** |   |\n| :---         | :--- |\n| **Actions**             | Copy the **POST URL** (remove */CarRepairClaim*) (1). Copy the **X-IBM-Client-Id** (2). In your script folder, on *terminal* window, *edit* the **00-variables** file and update the **BASEPATH** and **CLIENTID** (3). Execute **source exportVariables.sh** (4). Execute **./demotestcar.sh** (5). Check the **new case** in *Salesforce*. |\n| **Narration**      | We can use this page to test the API, but we will need to include the JSON body. Let’s use the test script that is ready. We just need to copy the new URL and the Client ID and update our script variables. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-test-apic1.png) <br/> ![](./images/demoscript-test-apic2.png) <br/> ![](./images/demoscript-test-apic3.png) <br/> ![](./images/demoscript-test-apic4.png) |\n\n</details>\n\n<details>\n<summary>6.5 - Publish API</summary>\n\n<br/>\n\n| **Publish API** |   |\n| :---         | :--- |\n| **Actions**             | Open the **Menu** (1) and click **Publish** (2). Enter **Car Repair APIs** as *Product Title* (3). Select **Catalog for Demo use (ddd-demo-test-catalog)** and click **Publish** (4). |\n| **Narration**      | We will make the API available to developers. To do so, the API must be included into an API product and then published to the catalog. A product dictates rate limits and API throttling. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-publish-api1.png) <br/> ![](./images/demoscript-publish-api2.png) <br/> ![](./images/demoscript-publish-api3.png) <br/> ![](./images/demoscript-publish-api4.png) |\n\n</details>\n\n<details>\n<summary>6.6 - Adding a Rate Limiting Plan</summary>\n\n<br/>\n\n| **Rate Limiting Plan** |   |\n| :---         | :--- |\n| **Actions**             | Open the **Products** tab (1). Click on the **Car Repair APIs** product (2). Click on **Plans** (3). Click **Add** (4). Enter **Gold Plan** as *Title* (5). Change the *Rate Limits* to **100 Calls Per 1 minute** (6). Click **Save** (7). Open the **Develop** page (8). Back to the **Products** tab (9). Open the **Menu** and **Publish** the Product (10). Select the *Catalog for Demo use* (11). Click **Publish** (12).  Open the **Manage** (13), open the **Catalog for Demo use** (14) and check the Products state and plans (15).|\n| **Narration**      | Security is applied to APIs. Rate limiting is applied to either APIs or API products. Let’s assign a rate limit for the API Product. We just need to open our new product. Rate limiting is accomplished using plans. Let’s create a new gold plan with a specific rate limits.<br/><br/> We have now two plans, the gold and the default plan. We can have multiple plans for different consumers. For example, we can add approval steps for consumers when they sign up, or we can allocate them plans as a provider.<br/><br/> We now need to republish our product. You’ll be prompted for a catalog to publish to. We only have one gateway installed so we don’t need to worry about that. Just publish. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-rate-limit1.png) <br/> ![](./images/demoscript-rate-limit2.png) <br/> ![](./images/demoscript-rate-limit3.png) <br/> ![](./images/demoscript-rate-limit4.png) <br/> ![](./images/demoscript-rate-limit5.png) <br/> ![](./images/demoscript-rate-limit6.png) <br/> ![](./images/demoscript-rate-limit7.png) |\n| **[Go to Top](#place1)** |   |\n\n</details>\n\n## 7 - Portal\n\n<details>\n<summary>7.1 - Accessing Portal</summary>\n\n<br/>\n\n| **Accessing Portal** |   |\n| :---         | :--- |\n| **Actions**             | Open the **Catalog settings** (1). Click **Portal** (2). Copy the **Portal URL** (3). Open a new browser tab and access the portal URL. If you don't have a developer account click **Create account** to create it (4). As soon as you complete the registration (5), just **Sign in** (6). |\n| **Narration**      | Now that we’ve published our API, we need to make sure that our API consumers can discover it and use it. Our portal allows potential API consumers to view the APIs, sign up and subscribe to plans in a self-service manner, test the APIs, download the OpenAPI - Swagger documents and more. Let’s get our portal URL and sign up as a consumer of our API using portal self-service.|\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-access-portal1.png) <br/> ![](./images/demoscript-access-portal2.png) <br/> ![](./images/demoscript-access-portal3.png) <br/> ![](./images/demoscript-access-portal4.png)|\n\n</details>\n\n<details>\n<summary>7.2 - Create a new App</summary>\n\n<br/>\n\n| **Create a new App** |   |\n| :---         | :--- |\n| **Actions**             | Click **Create a new App** (1). Enter **Car Repair Application** as *App Title* (2). Click **Save** (3). On the credentials dialog, click **OK** (4). On the **Subscription** tab, copy the Client ID (5). |\n| **Narration**      | As a consumer/developer, we’re going to create a new application in the portal. This will give us an API key, allowing us to call our APIs. We just need to give an application title and copy the API key and secret. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-new-app1.png) <br/> ![](./images/demoscript-new-app2.png) <br/> ![](./images/demoscript-new-app3.png) <br/> ![](./images/demoscript-new-app4.png)|\n\n</details>\n\n<details>\n<summary>7.3 - Subscribe to the API</summary>\n\n<br/>\n\n| **Subscribe to API** |   |\n| :---         | :--- |\n| **Actions**             | Click **Why not browse the available APIs?** (1). Click **Car Repair APIs 1.0.0** (2). On *Gold Plan*, click **Subscribe** (3). Select the **Car Repair Application** (4). Confirm the subscription by clicking **Next** (5). Click **Done** (6). |\n| **Narration**      | We haven't subscribed to any APIs, so let’s do it now. There’s only one API product to subscribe to in our demo, but normally there would be many. After we select our API product, we can see the plans available. Simply hover over each plan to get the limits.<br/><br/> We want to subscribe to the gold plan, but which application do we want to use to subscribe? We can have many applications but, in this demo, we’ve only created one. So, we just need to select the App that we created earlier and confirm our subscription. And done - we are subscribed to our API! |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-subscription1.png) <br/> ![](./images/demoscript-subscription2.png) <br/> ![](./images/demoscript-subscription3.png) <br/> ![](./images/demoscript-subscription4.png) <br/> ![](./images/demoscript-subscription5.png) <br/> ![](./images/demoscript-subscription6.png)|\n\n</details>\n\n<details>\n<summary>7.4 - Test the API</summary>\n\n<br/>\n\n| **Test the API** |   |\n| :---         | :--- |\n| **Actions**             | Click on the **Car_Insurance API** itself (1). Copy the **Endpoint** (2). Open the **POST /CarRepairClaim** (3). Explore the **Example request** area (4). Open the **Try it** tab (5). Click **Generate** (6). Click **Send** (7). Explore the **Response** (8).|\n| **Narration**      | We’re now back at the product screen, where we can explore our API. From the overview page, we can download the OpenAPI document and get the API endpoint. Note the portal has everything you need to call your API. It’s even generated clients in various languages for you to copy and paste into your calling application. You can try the API on the **Try it** area. Using the **Generate** button, the portal generates a request with random sample data for you. Now, let’s test it. We received a response, our API is running, and we’ve gone through the gateway to access it. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-portal-test1.png) <br/> ![](./images/demoscript-portal-test2.png) <br/> ![](./images/demoscript-portal-test3.png) <br/> ![](./images/demoscript-portal-test4.png) <br/> ![](./images/demoscript-portal-test5.png) <br/> ![](./images/demoscript-portal-test6.png)|\n\n</details>\n\n<details>\n<summary>7.5 - Viewing your API statistics</summary>\n\n<br/>\n\n| **Viewing your API statistics** |   |\n| :---         | :--- |\n| **Actions**             | Click **Apps** on top menu (1). Click the **Car Repair APIs** (2). Explore the API stats (3). |\n| **Narration**      | We can see our API statistics in the portal. We just need to select our app and we can see all the API calls, including any possible errors. If you make more calls, you’ll see larger statistic results. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-statistics1.png) <br/> ![](./images/demoscript-statistics2.png) <br/> ![](./images/demoscript-statistics3.png) |\n| **[Go to top](#place1)** |   |\n\n</details>\n\n## Summary\n\n<details>\n<summary>Summary</summary>\n\n<br/>\n\n| **Summary** |   |\n| :---         | :--- |\n| **Actions**             | Show final demo introduction [slides](./slides.pptx). |\n| **Narration**      | Let’s summarize what we’ve done today. In the demo we:<br/><ul><li>Accessed the Cloud Pak for Integration environment and explored the capabilities</li><li>Imported and reviewed the automated customer interactions integration flow</li><li>Tested the flow</li><li>Deployed the flow into the Cloud Pak runtime environment</li><li>Managed access to the flow as an API and set up the security and rate limits</li><li>Demonstrated how a developer can use the API Portal to perform self-service consumption of the API</li></ul><br/><br/>From a business perspective we used APIs and application integrations to automate a series of steps to: obtain and validate input information from a customer with a concern, open a case in Salesforce, attach the incoming information to the case, analyze the tone of the situation, and respond to the customer with the case number and expected date for resolution. <br/><br/>The customer expressing a concern or needing assistance obtains rapid response to their interaction and the confidence that your business is handling their request.\n| **[Go to top](#place1)** |   |\n\n</details>\n","type":"Mdx","contentDigest":"5e39ca2501e5197a3d463298a3892492","owner":"gatsby-plugin-mdx","counter":360},"frontmatter":{"title":"Demoscript","description":"Demo script","tabs":["Demo preparation","Demo script"]},"exports":{},"rawBody":"---\ntitle: Demoscript\ndescription: Demo script\ntabs: [ 'Demo preparation', 'Demo script']\n---\n\nexport const Title = () => <span>Improving customer service using APIs and integration: 300-level live demo</span>\n\n<FeatureCard\n  title=\"Demo Script\"\n  color=\"dark\"\n  >\n\n![banner](./images/demo-script.jpg)\n</FeatureCard>\n\n<span id=\"place1\"></span>\n\n<AnchorLinks>\n  <AnchorLink>Introduction</AnchorLink>\n  <AnchorLink>1 - Accessing the environment</AnchorLink>\n  <AnchorLink>2 - Importing the flow</AnchorLink>\n  <AnchorLink>3 - Reviewing the flow</AnchorLink>\n  <AnchorLink>4 - Testing the flow</AnchorLink>\n  <AnchorLink>5 - Deploying the flow</AnchorLink>\n  <AnchorLink>6 - Managing APIs</AnchorLink>\n  <AnchorLink>7 - Portal</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n## Introduction\n\n<br/>\n\n| **Introduction ** |   |\n| :---         | :--- |\n| **Actions**             | Show demo introduction [slides](./slides.pptx). |\n| **Narration**      | Automating customer interactions can remove manual steps, data entry into multiple different applications, and potential errors and delays – all of which are additional costs to your business. This demo automates a series of steps to: obtain and validate input information from a customer, open a case in Salesforce, attach incoming information to the case, analyze customer tone, and respond to the customer with the case number and expected date for resolution.<br/><br/>To automate this customer interaction, we will use both APIs and integrations. This demo scenario is related to a car repair, but this is just an example. The same techniques are applicable to any industry.<br/><br/>Let’s get started!\n| **[Go to Top](#place1)** |   |\n\n## 1 - Accessing the Environment\n\n<details>\n<summary>1.1 - Log into Cloud Pak for Integration</summary>\n\n<br/>\n\n| **Log into Cloud Pak for Integration** |   |\n| :---         | :--- |\n| **Actions**             | Open Cloud Pak for Integration and click **IBM provided credentials (admin only)** and **Log in** with your admin user and password. |\n| **Narration**      | Let’s see IBM Cloud Pak for Integration in action. Here I have a cloud version of the product on IBM Cloud. We will log in here. |\n| **Screenshots**         | &nbsp;  <br/>![login1](./images/demoscript-login1.png) <br/>![login2](./images/demoscript-login2.png) |\n\n</details>\n\n<details>\n<summary>1.2 - Cloud Pak for Integration home screen</summary>\n\n<br/>\n\n| **Cloud Pak for Integration home screen** |   |\n| :---         | :--- |\n| **Actions**             | Show the home screen and click on **Integration Capabilities**. |\n| **Narration**      | Welcome to IBM Cloud Pak for Integration! We’re now at the home screen showing all the capabilities of the pak, brought together in one place. Specialized integration capabilities for API management, application integration, messaging and more, are built on top of powerful automation services. Let’s see the integration capabilities available.|\n| **Screenshots**         | &nbsp;  <br/> ![home](./images/demoscript-home.png) |\n\n</details>\n\n<details>\n<summary>1.3 - Integration capabilities</summary>\n\n<br/>\n\n| **Integration capabilities** |   |\n| :---         | :--- |\n| **Actions**             | Show the integration capabilities page and open the Designer (**ace-designer-demo**). |\n| **Narration**      | As you can see, through a single interface you are able to access all the integration capabilities your team needs. Including API Management, Application Integration, Enterprise Messaging, Events, and High-Speed Transfer. In this demo to automate customer interactions with our company we will use App Connect for application integration, API Connect for API management, and the Asset Repository as our centralized hub for allowing our teams to work together with integration assets. Let’s open our App Connect Designer. |\n| **Screenshots**         | &nbsp; <br/> ![integration capabilities](./images/demoscript-integration.png) |\n| **[Go to Top](#place1)** |   |\n\n</details>\n\n## 2 - Importing the flow\n\n<details>\n<summary>2.1 - Create from an asset</summary>\n\n<br/>\n\n| **Create from an asset** |   |\n| :---         | :--- |\n| **Actions**             | Click **Create from an Asset**. |\n| **Narration**      |  We are in the designer tooling. This is where we can create all our API integration flows and manage our connectivity to services and endpoints. Since we are just starting, there is nothing to see yet. Let’s build some integration logic and see how simple to create our flow from the Asset Repository. |\n| **Screenshots**         | &nbsp;  <br/> ![import1](./images/demoscript-createfromasset.png) |\n\n</details>\n\n<details>\n<summary>2.2 - Select an asset</summary>\n\n<br/>\n\n| **Select an asset** |   |\n| :---         | :--- |\n| **Actions**             | Click on the **+** sign to the right on the **Car Insurance Cognitive API Lab Short V2**. |\n| **Narration**      | We have a flow stored in the Asset Repository. Let’s use it to simplify our demonstration.|\n| **Screenshots**         | &nbsp;  <br/> ![import2](./images/demoscript-select-asset.png) |\n| **[Go to Top](#place1)** |   |\n\n</details>\n\n## 3 - Reviewing the flow\n\n<details>\n<summary>3.1 - Review properties</summary>\n\n<br/>\n\n| **Review properties** |   |\n| :---         | :--- |\n| **Actions**             | Show the **Properties view** and click on **Operations** |\n| **Narration**      | The designer builds your API for you – you don’t need to worry about OpenAPI specs or Swagger editors – it’s all built in. These are the fields we are going to use for our API. Note that we tell our API which field is the key – in our case, CaseReference.|\n| **Screenshots**         | &nbsp;  <br/> ![review1](./images/demoscript-review-props.png) |\n\n</details>\n\n<details>\n<summary>3.2 - Review operations</summary>\n\n<br/>\n\n| **Review operations** |   |\n| :---         | :--- |\n| **Actions**             | Show the **Operations view** and click on **Edit flow** |\n| **Narration**      | In the Operations view are the actions that the API exposes along with the data. In this demo, we’re going to build just one operation – “Create Car Repair Claim”.  We can add more later if we wish. Let’s check the flow logic. |\n| **Screenshots**         | &nbsp;  <br/> ![review2](./images/demoscript-operations.png) |\n\n</details>\n\n<details>\n<summary>3.3 - Review the flow</summary>\n\n<br/>\n\n| **Review the flow** |   |\n| :---         | :--- |\n| **Actions**             | Initially **close** the Request dialog. Explain the Flow and Scroll through all of the connectors in the flow. After that, open the **Request** again, by clicking the first step of the flow. |\n| **Narration**      | Here we have our demo flow. In the designer flow editor, we can edit and change our flow. We are a car repair company that wants to create an API that will enable customers to send us photos of their cars along with descriptions of what needs to be done with them. With this information, we will create a case in Salesforce while using Watson to analyze if the customer is angry or upset. Let’s explore our flow in detail. |\n| **Screenshots**         | &nbsp;  <br/> ![review2](./images/demoscript-review-flow.png) |\n\n</details>\n\n<details>\n<summary>3.4 - Review request</summary>\n\n<br/>\n\n| **Review request** |   |\n| :---         | :--- |\n| **Actions**             | Show the *Request* dialog (1). Click to *open* the **if** step (2). |\n| **Narrations**      | Our flow starts by receiving the customer’s car repair request with photo via an API. Designer automatically creates an API “request” and “response” for your API flow.|\n| **Screenshots**         | &nbsp;  <br/> ![review3](./images/demoscript-review-request.png) |\n\n</details>\n\n<details>\n<summary>3.5 - Validating the photo</summary>\n\n<br/>\n\n| **Validating the photo** |   |\n| :---         | :--- |\n| **Actions**             | Explore the *if* step (1) and click on **Salesforce Connector - Retrieve contacts** (2). |\n| **Narration**      | Second, we validate the photo. We have a simple \"if\" statement that checks if the PhotoOfCar is empty. |\n| **Screenshots**         | &nbsp;  <br/> ![review5](./images/demoscript-review-if.png) |\n\n</details>\n\n<details>\n<summary>3.6 - Retrieve contacts</summary>\n\n<br/>\n\n| **Retrieve contacts** |   |\n| :---         | :--- |\n| **Actions**             | Explore the *Salesforce Connector - Retrieve contacts* (1). Change the *Contact name* to **Andrew Young** (2). And **test** the connection (3). Change back the *Contact Full name* to **Andy Young** (4) and **test** again (5). Open **View details** (6). On the *Output*, open the **Contact1** object (7). **Close** all the dialog tabs. Click on the **Salesforce – Create case node** (8). |\n| **Narration**      | Third, we use a connector to create a case in Salesforce with the data from the API. This case is where we store the details and progress of our repair. We are using a hard-coded contact name: ‘Andy Young’. He’s the contact for the insurance company that sends customers. Salesforce Developer Accounts have a prepopulated set of data that you can use to test. ‘Andy Young’ is one of those prepopulated contacts. Let’s test our connection with Salesforce. Let me change the contact to Andrew Young and test the connection.<br/><br/> The test shows that we don’t have an Andrew Young. Let’s change it back to Andy Young and test again. We now receive a successful response. This proves that our connection is working. Let’s check the details. Here we can see the output returned from Salesforce, including the Contact ID. |\n| **Screenshots**         | &nbsp;  <br/> ![contacts1](./images/demoscript-contacts1.png) <br/> ![contacts2](./images/demoscript-contacts2.png) <br/> ![contacts3](./images/demoscript-contacts3.png) <br/> ![contacts4](./images/demoscript-contacts4.png) <br/> ![contacts5](./images/demoscript-contacts5.png)|\n\n</details>\n\n<details>\n<summary>3.7 - Create a case</summary>\n\n<br/>\n\n| **Create a case** |   |\n| :---         | :--- |\n| **Actions**             | Explore the *Salesforce – Create case node*. **Close** the Salesforce connector dialog. Open the **Salesforce - Create Attachment** node. |\n| **Narration**      | Now that we have the ID that we need, let’s create our Salesforce case. Note that we just re-use the same Salesforce connector but with a different operation and data. Here we can see that our contact ID comes from the previous ‘retrieve contact’ Salesforce Call. The name and email address come from the API request. The connector ‘knows’ that fields like ‘Case Type’ have a limited number of values in Salesforce – so it automatically converts them into pull-down lists of values you can choose. |\n| **Screenshots**         | &nbsp;  <br/> ![review7](./images/demoscript-review-Salesforce-createcase.png) |\n\n</details>\n\n<details>\n<summary>3.8 - Create an attachment</summary>\n\n<br/>\n\n| **Create an attachment** |   |\n| :---         | :--- |\n| **Actions**             | Explore the *Salesforce – Create attachment node* (1). **Close** the Salesforce connector dialog. Open the **IBM Watson Tone Analyzer** node (2). |\n| **Narration**      | To add a photograph, we need to create a Salesforce attachment. That will be easy, since we just use the connector again. Note that we use the case ID that is a returned value from the ‘Create Case’ connector call, which is kept in the flow automatically. We send the PhotoOfCar as a base64 string and we tell Salesforce that the content type is image/jpeg. |\n| **Screenshots**         | &nbsp;  <br/> ![review8](./images/demoscript-review-attachment.png) |\n\n</details>\n\n<details>\n<summary>3.9 - Analyze the description</summary>\n\n<br/>\n\n| **Analyze the description** |   |\n| :---         | :--- |\n| **Actions**             | Explore the *Watson Tone Analyzer* connector (1). **Close** the Tone Analyzer connector dialog. Open the **Salesforce - Create case comment** (2). |\n| **Narration**      | Here, the Watson Tone Analyzer service analyzes the tone of the information provided by the customer. This can identify if the customer is angry or upset, allowing us to better tailor our response. |\n| **Screenshots**         | &nbsp;  <br/> ![review9](./images/demoscript-review-analyzer.png) |\n\n</details>\n\n<details>\n<summary>3.10 - Create case comment</summary>\n\n<br/>\n\n| **Create case comment** |   |\n| :---         | :--- |\n| **Actions**             | Explore the **Salesforce – Create case comment** node (1). Close the Salesforce connector dialog. Open the **Response**. (2) |\n| **Narration**      | Now we’ll add a comment to the case with the Salesforce connector and supply the tone name returned from Watson into the body of the comment. |\n| **Screenshots**         | &nbsp;  <br/> ![review10](./images/demoscript-review-comment.png) |\n\n</details>\n\n<details>\n<summary>3.11 - Responding to the customer</summary>\n\n<br/>\n\n| **Responding to the customer** |   |\n| :---         | :--- |\n| **Actions**             | Explore the *Response* dialog (1). Click **Done** (2). |\n| **Narration**      | Here we have the response that we submit to the customer after the API call. This response includes their Salesforce case reference for future enquiries, an estimate of how long it will take to repair, and also how much it will cost. Now that we've built the flow, let’s start it! |\n| **Screenshots**         | &nbsp;  <br/> ![review11](./images/demoscript-review-response.png) |\n| **[Go to Top](#place1)** |   |\n\n</details>\n\n## 4 - Testing the Flow\n\n<details>\n<summary>4.1 - Starting the flow</summary>\n\n<br/>\n\n| **Starting the flow** |   |\n| :---         | :--- |\n| **Actions**             | Click **Start API** on the *three dot menu* at the top right |\n| **Narration**      | Now that we’ve looked at the integration flow, let’s start it up. When our flow is running, we need to test it.  |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-start-flow.png) |\n\n</details>\n\n<details>\n<summary>4.2 - Setting environment variables</summary>\n\n<br/>\n\n| **Setting environment variables** |   |\n| :---         | :--- |\n| **Actions**             | Open the **Test** tab (1). Copy the **Endpoint URL** (2). Open **POST /CarRepairClaim** (3). Open **Try it** (4).  Copy the **Username** (5) and **Password** (6). In your script folder, on *terminal* window, *edit* the **00-variables** file (e.g.: *vi 00-variables*) and update the **BASEPATH** (7), **USERNAME** (8) and **PASSWORD** (9). Execute **source exportVariables.sh** (10) |\n| **Narration**      | Now that we’ve built our API, we need to test it. APIs can be tested in various ways, and we will performe three different tests: one in the designer tool now; another when our API is deployed to the Cloud Pak App Connect Runtime; and a final test that will call through a gateway. Since we’re using base64 pictures, for simplicity and speed we will use simple curl scripts so that we can call the APIs from the command line.<br/><br/> Before we execute the script to call our API, we need to configure our script to point to our environment. To get the credentials for the designer, we go to the ‘Manage’ tab in designer. Now, let’s change our variable files to use these credentials.  Let’s export these variables. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-variables0.png) <br/> ![](./images/demoscript-variables1.png) <br/> ![](./images/demoscript-variables2.png)  <br/> ![](./images/demoscript-variables3.png) |\n\n</details>\n\n<details>\n<summary>4.3 - Running the test</summary>\n\n<br/>\n\n| **Running the test** |   |\n| :---         | :--- |\n| **Actions**             | Edit the **demotestcar.sh** script (1). Explore and close the file. Execute **./demotestcar.sh** (2). |\n| **Narration**      | It's time to run the script. Checking the script, we can see that we have a simple curl command that calls our API, passing the user and password. Our data request is JSON with all the information about the case, including a picture with a Subaru SUV. When it is ready, we run this script. We received the expected response with the case information. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-car-running1.png) <br/> ![](./images/demoscript-car-running2.png) |\n\n</details>\n\n<details>\n<summary>4.4 - Checking Salesforce</summary>\n\n<br/>\n\n| **Checking Salesforce** |   |\n| :---         | :--- |\n| **Actions**             | Open the **Salesforce Dev Account** site (1). On the *App Launcher* menu, search for **Cases** (2). Open the **Cases** page (3). On *Cases* view, open the latest **Car Breakdown case** (4). Explore all fields, including picture and Watson analysis (5).  |\n| **Narration**      | Let’s check our Salesforce system to see if we have a new case. Let’s open the Cases page. In the Recently Viewed section, we can check all open cases. Here we have our case with all the information, including the picture and the Watson tone analysis. With this information, our customer relationship team can support our customer.  |\n| **Screenshots**         | &nbsp;  <br/> ![Salesforce-check1](./images/demoscript-Salesforce-check1.png) <br/> ![](./images/demoscript-Salesforce-check2.png) <br/> ![](./images/demoscript-Salesforce-check3.png) |\n| **[Go to Top](#place1)** |   |\n\n</details>\n\n## 5 - Deploying the flow\n\n<details>\n\n<br/>\n\n| **5.1 - Export the BAR file** |   |\n| :---         | :--- |\n| **Actions**             | Into the *Designer Dashboard* (1), click the **menu** (2) and click **Export** (3).   Select **Runtime flow asset (BAR)** (4) and click **Export** (5).  |\n| **Narration**      | To deploy the flow to an integration server, you must export it as a BAR file. All the configuration settings, other than the connection credentials for your accounts, are preserved in the exported archive. Let’s export an executable BAR file. From the dashboard, locate the flow, open its menu, and then click Export. When you export a flow, you can choose to export its configuration as a YAML or BAR file, or as an OpenAPI document. In our case, we export as a BAR File. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-export-bar1.png) <br/> ![](./images/demoscript-export-bar2.png) |\n\n</details>\n\n<details>\n<summary>5.2 - Import the BAR file</summary>\n\n<br/>\n\n| **Import the BAR file** |   |\n| :---         | :--- |\n| **Actions**             | Open the **Main Menu** (1), and click **Run > Integrations** (2).  Click **Create a server** (3). Select **Quick start designer integration** (4) and click **Next** (5). **Upload the BAR** file (6) and click **Next** (7). Select **ace-designerdemo-designer-acc** (8) and click **Next** (9). Enter a *name* for our integration server (10). Set **Enable Operations Dashboard tracing** to **On** (11). Enter **cp4i** as *Operations Dashboard namespace (12). Click **Create** (13)   |\n| **Narration**      | Now, let’s open the App Connect Dashboard and create a new server. We need to create an integration server to run our integration. An integration server is a Kubernetes pod which has the containers needed to run our BAR file. We need to select the kind of tooling we used to build the integration. We used the Designer. So, we just need to upload the BAR file that we exported from designer. And here we choose which configurations we want. Here we enter the information that we want for our Integration server. Let’s create it! |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-import-bar1.png) <br/> ![](./images/demoscript-import-bar2.png) <br/> ![](./images/demoscript-import-bar3.png) <br/> ![](./images/demoscript-import-bar4.png) <br/> ![](./images/demoscript-import-bar5.png) <br/> ![](./images/demoscript-import-bar6.png)|\n\n</details>\n\n<details>\n<summary>5.3 - Verify the server</summary>\n\n<br/>\n\n| **Verify the server** |   |\n| :---         | :--- |\n| **Actions**             | Click on our **Integration Server** (1). Open our **API Flow** (2). Explore the API detais (3). |\n| **Narration**      | Now we have our new integration server. We need to wait some time for the pods to start. At this point, the integration is running on the Cloud Pak. Opening the server, we can see our API flow. And click again, we’ll drill down further and see our API details. We can see the REST operation, the base URL, and we can even download the OpenAPI document. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-verify-server1.png) <br/> ![](./images/demoscript-verify-server2.png) <br/> ![](./images/demoscript-verify-server3.png) |\n\n</details>\n\n<details>\n<summary>5.4 - Testing the flow on the runtime</summary>\n\n<br/>\n\n| **Testing the flow in the runtime** |   |\n| :---         | :--- |\n| **Actions**             | Copy the **Endpoint** (1). In your script folder, on *terminal* window, *edit* the **00-variables** file and update the **BASEPATH** (2). *NOTE:remove the \"/\" from the end of the endpoint*. Execute **source exportVariables.sh** (3). Execute **./demotestcar.sh** (4). Check the **new case** in *Salesforce* (5).|\n| **Narration**      | We’ll use the same scripts we used to test designer – we’ll just change the variables to point to the CP4I runtime. In the server, we can get the runtime information. Let’s update our variables file and export them again. Now, we just need to run our script again with the same request data. We can check the Salesforce cases page, and voilá here we have our new case created by calling the API in the Integration Runtime. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-testing-runtime1.png) <br/> ![](./images/demoscript-testing-runtime2.png) <br/> ![](./images/demoscript-testing-runtime3.png) <br/> ![](./images/demoscript-testing-runtime4.png) <br/> ![](./images/demoscript-testing-runtime5.png) |\n| **[Go to Top](#place1)** |   |\n\n</details>\n\n## 6 - Managing APIs\n\n<details>\n<summary>6.1 - Download an OpenAPI document</summary>\n\n<br/>\n\n| **Download an OpenAPI Document** |   |\n| :---         | :--- |\n| **Actions**             | Click **Download OpenAPI Document** link (1). Open your YAML file with any editor and manually add **x-ibm-configuration: gateway: datapower-api-gateway** (2).|\n| **Narration**      | We’ve created an application integration flow and successfully called it via a REST API call! Now, to make it accessible to the world, it’s important to add security around it. Let’s export our API to API Connect by downloading the OpenAPI document. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-download-openapi.png) <br/> ![](./images/demoscript-download-openapi2.png) |\n\n</details>\n\n<details>\n<summary>6.2 - Develop the API</summary>\n\n<br/>\n\n| **Develop the API** |   |\n| :---         | :--- |\n| **Actions**             | Open the **Menu** (1) and on **Run** (2) section, select **APIs** (3). If necessary, select the **ademo** instance (4). In the *API Connect* page, click **Common Services user registry** (5). Click **Develop APIs and Products** (6). Click **Add**, then choose **API (from REST, GraphQL or SOAP)** from the drop-down menu (7). Choose **From an existing OpenAPI service** (8) and click **Next** (9). Upload our **Car_Insurance..** YAML file (10) and click **Next** (11). Confirm the Info about API and click **Next** (12). Keep the security settings and click **Next** (13). |\n| **Narration**      | Now, let’s open our API Manager. Here, we add our API from an existing OpenAPI service by selecting our YAML file. We confirm the info about the API, keep the security settings. Our API with Client ID is created! |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-develop-api1.png) <br/> ![](./images/demoscript-develop-api2.png) <br/> ![](./images/demoscript-develop-api3.png) <br/> ![](./images/demoscript-develop-api4.png) <br/> ![](./images/demoscript-develop-api5.png) <br/> ![](./images/demoscript-develop-api6.png) <br/> ![](./images/demoscript-develop-api7.png) <br/> ![](./images/demoscript-develop-api8.png) <br/> ![](./images/demoscript-develop-api9.png) <br/> ![](./images/demoscript-develop-api10.png)|\n\n</details>\n\n<details>\n<summary>6.3 - Edit the API</summary>\n\n<br/>\n\n| **Edit the API** |   |\n| :---         | :--- |\n| **Actions**             | Click **Edit API** (1). Change to **Online** (2). scroll down to *Base Path*. You’ll see the base path has a trailing slash at the\nend. **Remove** this (3). Click **Save** (4). Click **Test** (5). |\n| **Narration**      | Let’s check our new API in API Manager. We will put our API online and test it. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-edit-api1.png) <br/> ![](./images/demoscript-edit-api2.png) <br/> ![](./images/demoscript-edit-api3.png)|\n\n</details>\n\n<details>\n<summary>6.4 - Test the API</summary>\n\n<br/>\n\n| **Test the API** |   |\n| :---         | :--- |\n| **Actions**             | Copy the **POST URL** (remove */CarRepairClaim*) (1). Copy the **X-IBM-Client-Id** (2). In your script folder, on *terminal* window, *edit* the **00-variables** file and update the **BASEPATH** and **CLIENTID** (3). Execute **source exportVariables.sh** (4). Execute **./demotestcar.sh** (5). Check the **new case** in *Salesforce*. |\n| **Narration**      | We can use this page to test the API, but we will need to include the JSON body. Let’s use the test script that is ready. We just need to copy the new URL and the Client ID and update our script variables. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-test-apic1.png) <br/> ![](./images/demoscript-test-apic2.png) <br/> ![](./images/demoscript-test-apic3.png) <br/> ![](./images/demoscript-test-apic4.png) |\n\n</details>\n\n<details>\n<summary>6.5 - Publish API</summary>\n\n<br/>\n\n| **Publish API** |   |\n| :---         | :--- |\n| **Actions**             | Open the **Menu** (1) and click **Publish** (2). Enter **Car Repair APIs** as *Product Title* (3). Select **Catalog for Demo use (ddd-demo-test-catalog)** and click **Publish** (4). |\n| **Narration**      | We will make the API available to developers. To do so, the API must be included into an API product and then published to the catalog. A product dictates rate limits and API throttling. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-publish-api1.png) <br/> ![](./images/demoscript-publish-api2.png) <br/> ![](./images/demoscript-publish-api3.png) <br/> ![](./images/demoscript-publish-api4.png) |\n\n</details>\n\n<details>\n<summary>6.6 - Adding a Rate Limiting Plan</summary>\n\n<br/>\n\n| **Rate Limiting Plan** |   |\n| :---         | :--- |\n| **Actions**             | Open the **Products** tab (1). Click on the **Car Repair APIs** product (2). Click on **Plans** (3). Click **Add** (4). Enter **Gold Plan** as *Title* (5). Change the *Rate Limits* to **100 Calls Per 1 minute** (6). Click **Save** (7). Open the **Develop** page (8). Back to the **Products** tab (9). Open the **Menu** and **Publish** the Product (10). Select the *Catalog for Demo use* (11). Click **Publish** (12).  Open the **Manage** (13), open the **Catalog for Demo use** (14) and check the Products state and plans (15).|\n| **Narration**      | Security is applied to APIs. Rate limiting is applied to either APIs or API products. Let’s assign a rate limit for the API Product. We just need to open our new product. Rate limiting is accomplished using plans. Let’s create a new gold plan with a specific rate limits.<br/><br/> We have now two plans, the gold and the default plan. We can have multiple plans for different consumers. For example, we can add approval steps for consumers when they sign up, or we can allocate them plans as a provider.<br/><br/> We now need to republish our product. You’ll be prompted for a catalog to publish to. We only have one gateway installed so we don’t need to worry about that. Just publish. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-rate-limit1.png) <br/> ![](./images/demoscript-rate-limit2.png) <br/> ![](./images/demoscript-rate-limit3.png) <br/> ![](./images/demoscript-rate-limit4.png) <br/> ![](./images/demoscript-rate-limit5.png) <br/> ![](./images/demoscript-rate-limit6.png) <br/> ![](./images/demoscript-rate-limit7.png) |\n| **[Go to Top](#place1)** |   |\n\n</details>\n\n## 7 - Portal\n\n<details>\n<summary>7.1 - Accessing Portal</summary>\n\n<br/>\n\n| **Accessing Portal** |   |\n| :---         | :--- |\n| **Actions**             | Open the **Catalog settings** (1). Click **Portal** (2). Copy the **Portal URL** (3). Open a new browser tab and access the portal URL. If you don't have a developer account click **Create account** to create it (4). As soon as you complete the registration (5), just **Sign in** (6). |\n| **Narration**      | Now that we’ve published our API, we need to make sure that our API consumers can discover it and use it. Our portal allows potential API consumers to view the APIs, sign up and subscribe to plans in a self-service manner, test the APIs, download the OpenAPI - Swagger documents and more. Let’s get our portal URL and sign up as a consumer of our API using portal self-service.|\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-access-portal1.png) <br/> ![](./images/demoscript-access-portal2.png) <br/> ![](./images/demoscript-access-portal3.png) <br/> ![](./images/demoscript-access-portal4.png)|\n\n</details>\n\n<details>\n<summary>7.2 - Create a new App</summary>\n\n<br/>\n\n| **Create a new App** |   |\n| :---         | :--- |\n| **Actions**             | Click **Create a new App** (1). Enter **Car Repair Application** as *App Title* (2). Click **Save** (3). On the credentials dialog, click **OK** (4). On the **Subscription** tab, copy the Client ID (5). |\n| **Narration**      | As a consumer/developer, we’re going to create a new application in the portal. This will give us an API key, allowing us to call our APIs. We just need to give an application title and copy the API key and secret. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-new-app1.png) <br/> ![](./images/demoscript-new-app2.png) <br/> ![](./images/demoscript-new-app3.png) <br/> ![](./images/demoscript-new-app4.png)|\n\n</details>\n\n<details>\n<summary>7.3 - Subscribe to the API</summary>\n\n<br/>\n\n| **Subscribe to API** |   |\n| :---         | :--- |\n| **Actions**             | Click **Why not browse the available APIs?** (1). Click **Car Repair APIs 1.0.0** (2). On *Gold Plan*, click **Subscribe** (3). Select the **Car Repair Application** (4). Confirm the subscription by clicking **Next** (5). Click **Done** (6). |\n| **Narration**      | We haven't subscribed to any APIs, so let’s do it now. There’s only one API product to subscribe to in our demo, but normally there would be many. After we select our API product, we can see the plans available. Simply hover over each plan to get the limits.<br/><br/> We want to subscribe to the gold plan, but which application do we want to use to subscribe? We can have many applications but, in this demo, we’ve only created one. So, we just need to select the App that we created earlier and confirm our subscription. And done - we are subscribed to our API! |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-subscription1.png) <br/> ![](./images/demoscript-subscription2.png) <br/> ![](./images/demoscript-subscription3.png) <br/> ![](./images/demoscript-subscription4.png) <br/> ![](./images/demoscript-subscription5.png) <br/> ![](./images/demoscript-subscription6.png)|\n\n</details>\n\n<details>\n<summary>7.4 - Test the API</summary>\n\n<br/>\n\n| **Test the API** |   |\n| :---         | :--- |\n| **Actions**             | Click on the **Car_Insurance API** itself (1). Copy the **Endpoint** (2). Open the **POST /CarRepairClaim** (3). Explore the **Example request** area (4). Open the **Try it** tab (5). Click **Generate** (6). Click **Send** (7). Explore the **Response** (8).|\n| **Narration**      | We’re now back at the product screen, where we can explore our API. From the overview page, we can download the OpenAPI document and get the API endpoint. Note the portal has everything you need to call your API. It’s even generated clients in various languages for you to copy and paste into your calling application. You can try the API on the **Try it** area. Using the **Generate** button, the portal generates a request with random sample data for you. Now, let’s test it. We received a response, our API is running, and we’ve gone through the gateway to access it. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-portal-test1.png) <br/> ![](./images/demoscript-portal-test2.png) <br/> ![](./images/demoscript-portal-test3.png) <br/> ![](./images/demoscript-portal-test4.png) <br/> ![](./images/demoscript-portal-test5.png) <br/> ![](./images/demoscript-portal-test6.png)|\n\n</details>\n\n<details>\n<summary>7.5 - Viewing your API statistics</summary>\n\n<br/>\n\n| **Viewing your API statistics** |   |\n| :---         | :--- |\n| **Actions**             | Click **Apps** on top menu (1). Click the **Car Repair APIs** (2). Explore the API stats (3). |\n| **Narration**      | We can see our API statistics in the portal. We just need to select our app and we can see all the API calls, including any possible errors. If you make more calls, you’ll see larger statistic results. |\n| **Screenshots**         | &nbsp;  <br/> ![](./images/demoscript-statistics1.png) <br/> ![](./images/demoscript-statistics2.png) <br/> ![](./images/demoscript-statistics3.png) |\n| **[Go to top](#place1)** |   |\n\n</details>\n\n## Summary\n\n<details>\n<summary>Summary</summary>\n\n<br/>\n\n| **Summary** |   |\n| :---         | :--- |\n| **Actions**             | Show final demo introduction [slides](./slides.pptx). |\n| **Narration**      | Let’s summarize what we’ve done today. In the demo we:<br/><ul><li>Accessed the Cloud Pak for Integration environment and explored the capabilities</li><li>Imported and reviewed the automated customer interactions integration flow</li><li>Tested the flow</li><li>Deployed the flow into the Cloud Pak runtime environment</li><li>Managed access to the flow as an API and set up the security and rate limits</li><li>Demonstrated how a developer can use the API Portal to perform self-service consumption of the API</li></ul><br/><br/>From a business perspective we used APIs and application integrations to automate a series of steps to: obtain and validate input information from a customer with a concern, open a case in Salesforce, attach the incoming information to the case, analyze the tone of the situation, and respond to the customer with the case number and expected date for resolution. <br/><br/>The customer expressing a concern or needing assistance obtains rapid response to their interaction and the confidence that your business is handling their request.\n| **[Go to top](#place1)** |   |\n\n</details>\n","fileAbsolutePath":"/home/runner/work/platinum-demos/platinum-demos/src/pages/300-integration/demo-script.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}